<?php/** * Imager Class, sets up and renders images based on settings. *  * The purpose of this class is to create HTML images based on PHP inputs. It allows creating simple, straight-forward * function calls and parameter setting. It also lets applications crop images and create new versions of the images. *  * @author      Ryan Carney-Mogan * @category    Core_Classes * @version     1.0.4 * @copyright   Copyright (c) 2013 University of Colorado Boulder (http://colorado.edu) *  */ class Imager{      public $loaded      = false;    public $imagepath   = "";    public $styles      = array();    public $attributes  = array();    public $width       = 0;    public $height      = 0;        /**     * Constructor sets up the image for rendering if @param $image_src is not null.     *     * @param   (string)    $image_src  (Optional) The local image path.     */    public function __construct($image=null)    {        if(is_null($image)) return;                $this->init($image);    }      public function init($image)    {        if(is_file($image)) $this->loaded = true;        else return;                $this->load_image_paths($image);        $this->load_image_specs();    }      /**     * Load Image Paths     *      * This function sets up the image paths for both local and web use.     *      * @param   (string)    $image_path     The image's path.     * @return  (object)                    Returns this class for linked method calling.     */    public function load_image_paths($image_path)    {        $this->imagepath = str_ireplace("//".WEB_ROOT,ROOT,$image_path);        $this->imagehttp = str_replace("\\","/",str_ireplace(ROOT,"//".WEB_ROOT,$this->imagepath));        return $this;    }    /**     * Load Image Specifications     *      * This functions finds the image's specifications and loads them into the local variables.     *      * @return  (object)                    Returns this class for linked method calling.     */    public function load_image_specs()    {        # Only if an image path exists        if(!isset($this->imagepath)) return;                # Get the image size specs        list($imgwidth, $imgheight, $imgtype, $imgattr)= getimagesize($this->imagepath);                # Localize image's specifications        $this->width    = $imgwidth;        $this->height   = $imgheight;        $this->type     = $imgtype;        $this->attr     = $imgattr;                return $this;    }      /**     * Add Attribute     *      * Add an attibute to the local attributes table.     *      * @return  (object)                    Returns this class for linked method calling.     */    public function add_attribute($attr,$val)    {        $this->attributes[$attr] = $val;    }      /**     * Crop     *      * Takes an image and crops it to a new image. The new cropped image is overwritten (for now).     *      * @param   (string)    $width      Width of new crop image     * @param   (string)    $height     Height of new crop image     * @return  (object)                    Returns this class for linked method calling.     */    public function crop($target,$width,$height="auto")    {        # Can't have both width and height set to auto        if($width=="auto" and $height=="auto") return;                if($this->width == 0 | $this->height == 0) {            return false;        }                # Keep original dimensions        $original_width = $this->width;        $original_height = $this->height;                # Load image resource        //if(!imagecreatefromjpeg($this->imagepath)) return;        $image = @imagecreatefromjpeg($this->imagepath);        if(!is_resource($image)) return;                $thumb_width = intval($width);                # If height is set to "auto", maintain aspect ratio and create new height based on width        if($height=="auto") {          //$thumb_height = ($this->height * $width) / $this->height;          $thumb_height = ($this->height / $this->width) * $width;          //var_dump($fixed_height);        }        else {          $thumb_height = $height;        }        // $thumb = imagecreatetruecolor( $thumb_width, $thumb_height );                // # Resize and crop        // imagecopyresampled( $thumb,             # The new cropped image        //                     $image,             # The original image to crop            //                     0,                  # Center the image horizontally        //                     0,                  # Center the image vertically        //                     0,                  # Starting x coordinate        //                     0,                  # Starting y coordinate        //                     $thumb_width,       # Cropped width        //                     $thumb_height,      # Cropped height        //                     $original_width,    # Width of original image        //                     $original_height    # Height of original image        // );        $new_size = ($original_height > $original_width ? $original_width : $original_height);        $x_crop = ($original_width - $new_size) / 2;        $y_crop = ($original_height - $new_size) / 2;        $thumb = imagecreatetruecolor($width, $width);        imagecopyresampled(                  $thumb,                  $image,                  0,                  0,                  $x_crop,                  $y_crop,                  $width,                  $width,                  $new_size,                  $new_size        );                # Create image        imagejpeg($thumb, $target, 70);    }      /**     * Resize     *      * Takes an image and resizes it depending on aspect ratios. Just changes the width/height local     * variables.     *      * @param   (string)    $width      Width of new crop image     * @param   (string)    $height     Height of new crop image     * @return  (object)                Returns this class for linked method calling.     */    public function resize($width,$height="auto")    {        # If the image isn't loaded then what are we resizing??        if(!$this->loaded) {            return;        }                # Both width/height cannot be "auto"        if($width=="auto" and $height=="auto") {            return;        }                $original_width = $this->width;        $original_height = $this->height;                if($width!="auto") {            if(strstr($width,"%")) {                $width = (float)str_replace("%","",$width);                $width = $width / 100;                $this->width = $original_width * $width;                if($height=="auto") {                    $this->height = $original_height * $width;                }            }             else {                $this->width = $width;            }        }        if($height!="auto") {            if(strstr($height,"%")) {                $height = (float)str_replace("%","",$height);                $height = $height / 100;                $this->height = $this->height * $height;            }             else {                $this->height = $height;            }            if($width=="auto") {                $this->width = round((($this->height * $original_width) / $original_height),0);            }        }        else {            $this->height = round((($this->width * $original_height) / $original_width),0);        }                $this->width = intval($this->width);        $this->height = intval($this->height);    }      /**     * Render     *      * Creates HTML output of image and its local variables. Renders output.     *      */    public function render()    {        $image = @imagecreatefromjpeg($this->imagepath);        //if(!is_resource($image)) return;                # Start the output buffer and load image html        ob_start();        ?><img src=":imagesrc:" width=":width:" height=":height:" :attributes: :styles: /><?php        $contents = ob_get_contents();        ob_end_clean();                  # Replace all replaceables with local properties        $contents = str_replace(":imagesrc:",@$this->imagehttp,$contents);        $contents = str_replace(":width:",$this->width,$contents);        $contents = str_replace(":attributes:",@$this->render_attributes(),$contents);        $contents = str_replace(":height:",@$this->height,$contents);        $contents = str_replace(":styles:",@$this->render_styles(),$contents);                # Output rendering        echo $contents;    }      /**     * Render Styles     *      * Creates HTML output of image styles.     *      * @return (string)     */    public function render_styles()    {        $styles = "";        if(empty($this->styles)) {            return $styles;        }        $styles = "style=\"";        foreach($this->styles as $attr=>$val) {            $styles .= $attr.":".$val.";";        }        $styles .= "\"";        return $styles;    }          /**     * Render Attributes     *      * Creates HTML output of image attributes.     *      * @return (string)     */    public function render_attributes()    {        $attributes = "";        if(empty($this->attributes)) {            return $attributes;        }        foreach($this->attributes as $attr=>$val) {            $attributes .= $attr."='".$val."' ";        }        return $attributes;    }  }